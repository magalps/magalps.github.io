'''
Em Python, conjuntos s√£o estruturas de dados que armazenam elementos √∫nicos (sem duplicatas) 
e s√£o baseados na teoria dos conjuntos da matem√°tica. Eles s√£o n√£o ordenados e podem ser usados
para opera√ß√µes como uni√£o, interse√ß√£o e diferen√ßa.

A classe utilizada para representar conjuntos √© a set.
'''
'''
1 - Criando conjuntos
'''
#1.1 - Conjunto Vazio:
conjunto_vazio = set()  # N√£o use {} para conjuntos vazios (isso cria um dicion√°rio)

#1.2 - Conjunto com Elementos:
conjunto = {1, 2, 3, 4, 5}

#1.3 - Usando o Construtor set():
conjunto = set([1, 2, 2, 3])  # Elementos duplicados ser√£o removidos
print(conjunto)  # {1, 2, 3}

conjunto_strings = set("Python")  # {'P', 'y', 't', 'h', 'o', 'n'}

'''
2 - Caracter√≠sticas dos Conjuntos
'''
#2.1 Elementos √önicos: Conjuntos n√£o permitem duplicatas.
conjunto = {1, 2, 2, 3}
print(conjunto)  # {1, 2, 3}

#2.2 - N√£o Ordenado: Conjuntos n√£o t√™m ordem definida. O acesso direto por √≠ndice n√£o √© poss√≠vel.
conjunto = {3, 1, 2}
print(conjunto)  # A ordem pode variar: {1, 2, 3}

#2.3 - Conjuntos podem conter qualquer tipo de dado imut√°vel (como n√∫meros, strings ou tuplas), 
# mas n√£o listas ou dicion√°rios.
conjunto = {1, "Python", (2, 3)}

'''
3 - Opera√ß√µes B√°sicas com Conjuntos
'''
#3.1 - Adicionar Elemento: add(elemento): Adiciona um elemento ao conjunto.
conjunto = {1, 2, 3}
conjunto.add(4)
print(conjunto)  # {1, 2, 3, 4}

#3.2 - Remover Elemento: 
# remove(elemento): Remove um elemento (gera erro se n√£o existir).
conjunto.remove(3)

#discard(elemento): Remove um elemento (n√£o gera erro se n√£o existir).
conjunto.discard(5)

#pop(): Remove e retorna um elemento arbitr√°rio (√∫til apenas para conjuntos pequenos).
elemento = conjunto.pop()
print(elemento, conjunto)

#clear(): Remove todos os elementos do conjunto.
conjunto.clear()
print(conjunto)  # set()

'''
4 - Opera√ß√µes entre Conjuntos
'''
#4.1 - Uni√£o (| ou union()): 
# Combina todos os elementos de dois conjuntos.
a = {1, 2, 3}
b = {3, 4, 5}
print(a | b)         # {1, 2, 3, 4, 5}
print(a.union(b))    # {1, 2, 3, 4, 5}

#4.2 - Interse√ß√£o (& ou intersection()): 
# Retorna os elementos comuns aos dois conjuntos.
print(a & b)         # {3}
print(a.intersection(b))  # {3}

#4.3 - Diferen√ßa (- ou difference()): 
# Retorna os elementos que est√£o no primeiro conjunto, mas n√£o no segundo.
print(a - b)         # {1, 2}
print(a.difference(b))  # {1, 2}

#4.4 - Diferen√ßa Sim√©trica (^ ou symmetric_difference()):
# Retorna os elementos que est√£o em um conjunto ou no outro, mas n√£o em ambos.
print(a ^ b)         # {1, 2, 4, 5}
print(a.symmetric_difference(b))  # {1, 2, 4, 5}

'''
M√©todos √öteis de Conjuntos
M√©todo	                        Descri√ß√£o
add(elemento)	                Adiciona um elemento ao conjunto
remove(elemento)	            Remove um elemento (erro se n√£o existir)
discard(elemento)	            Remove um elemento (sem erro se n√£o existir)
clear()	                        Remove todos os elementos
union(outra)	                Retorna a uni√£o de dois conjuntos
intersection(outra)	            Retorna a interse√ß√£o
difference(outra)	            Retorna a diferen√ßa
symmetric_difference(outra)	    Retorna a diferen√ßa sim√©trica
issubset(outra)	                Verifica se o conjunto √© um subconjunto
issuperset(outra)	            Verifica se o conjunto √© um superconjunto
isdisjoint(outra)	            Verifica se dois conjuntos s√£o disjuntos
'''

'''
5 - Verificando Rela√ß√µes entre Conjuntos
'''
#5.1 - Subconjunto
a = {1, 2, 3}
b = {1, 2}
print(b.issubset(a))  # True

#5.2 - Superconjunto:
print(a.issuperset(b))  # True

#5.3 - Disjunto (sem interse√ß√£o):
c = {4, 5}
print(a.isdisjoint(c))  # True

#Exemplo completo
a = {1, 2, 3}
b = {3, 4, 5}

# Opera√ß√µes
print(a | b)  # Uni√£o: {1, 2, 3, 4, 5}
print(a & b)  # Interse√ß√£o: {3}
print(a - b)  # Diferen√ßa: {1, 2}
print(a ^ b)  # Diferen√ßa sim√©trica: {1, 2, 4, 5}

# M√©todos
a.add(6)
a.remove(2)
print(a)  # {1, 3, 6}

'''
Os conjuntos s√£o √∫teis em situa√ß√µes onde √© importante:

Garantir unicidade.
Realizar opera√ß√µes matem√°ticas (uni√£o, interse√ß√£o, etc.).
Comparar cole√ß√µes rapidamente. üöÄ
'''