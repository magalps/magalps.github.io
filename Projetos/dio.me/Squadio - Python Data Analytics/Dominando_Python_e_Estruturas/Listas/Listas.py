""""Em Python, listas s√£o estruturas de dados que armazenam m√∫ltiplos valores em uma √∫nica 
vari√°vel. Elas s√£o mut√°veis, o que significa que podem ser modificadas ap√≥s a cria√ß√£o. 
As listas s√£o ordenadas e podem conter valores de diferentes tipos 
(inteiros, strings, objetos, etc.)."""

'''
1 - Criando Listas
'''

#1.1 - Lista Vazia:
lista = []


#1.2 - Lista com Valores:
numeros = [1, 2, 3, 4, 5]
nomes = ["Ana", "Jo√£o", "Carlos"]
misto = [1, "Python", 3.14, True]


#1.3 - Usando list():
lista = list("Python")  # ['P', 'y', 't', 'h', 'o', 'n']

'''
2 - Acessando Elementos da Lista
'''
#2.1 - Acesso por √çndice (come√ßa em 0):
numeros = [10, 20, 30, 40]
print(numeros[0])  # 10 (primeiro elemento)
print(numeros[2])  # 30 (terceiro elemento)


#2.2 - √çndices Negativos (de tr√°s para frente):
print(numeros[-1])  # 40 (√∫ltimo elemento)
print(numeros[-2])  # 30 (pen√∫ltimo elemento)

#2.3 - Fatiamento:
print(numeros[1:3])  # [20, 30] (do √≠ndice 1 ao 2)
print(numeros[:2])   # [10, 20] (do in√≠cio at√© o √≠ndice 1)
print(numeros[::2])  # [10, 30] (pula de 2 em 2)


'''
3 - Modificando Listas
'''
#3.1 - Alterar um Elemento:
numeros[1] = 25
print(numeros)  # [10, 25, 30, 40]

#3.2 - Inserir um Elemento:
#append() ‚Äì Adiciona um elemento ao final da lista.
numeros.append(50)

#insert() ‚Äì Insere um elemento em um √≠ndice espec√≠fico.
numeros.insert(1, 15)  # Insere 15 na posi√ß√£o 1

#extend() ‚Äì Adiciona v√°rios elementos de outra lista.
numeros.extend([60, 70])

#3.3 - Remover Elementos:
#remove(valor) ‚Äì Remove a primeira ocorr√™ncia do valor especificado.
numeros.remove(30)

#pop() ‚Äì Remove e retorna o √∫ltimo elemento (ou o de um √≠ndice espec√≠fico).
numeros.pop()  # Remove o √∫ltimo elemento
numeros.pop(1)  # Remove o elemento no √≠ndice 1

#del ‚Äì Remove elementos por √≠ndice.
del numeros[0]  # Remove o primeiro elemento

'''
4 - Ordenar Listas:
'''
#sort() ‚Äì Ordena a lista em ordem crescente.
numeros.sort()  # [10, 15, 25, 40, 50, 60, 70]

#reverse() ‚Äì Inverte a ordem da lista.
numeros.reverse()

'''
5 - Fun√ß√µes √öteis com Listas
'''
#len() ‚Äì Retorna o tamanho da lista.
print(len(numeros))  # 6

#min() ‚Äì Retorna o menor valor.
print(min(numeros))  # 10

#max() ‚Äì Retorna o maior valor.
print(max(numeros))  # 70

#sum() ‚Äì Retorna a soma de todos os elementos (se forem n√∫meros).
print(sum(numeros))  # 230

#Iterar sobre Listas
for numero in numeros:
    print(numero)

#Compreens√£o de Listas (List Comprehension)
quadrados = [x**2 for x in range(5)]
print(quadrados)  # [0, 1, 4, 9, 16]

#Exemplo Completo
numeros = [1, 2, 3]
numeros.append(4)
numeros.insert(0, 0)  # [0, 1, 2, 3, 4]
numeros.remove(2)     # [0, 1, 3, 4]
numeros.pop()         # [0, 1, 3]
numeros.extend([5, 6])  # [0, 1, 3, 5, 6]
numeros.sort(reverse=True)  # [6, 5, 3, 1, 0]

'''
Resumo R√°pido:

Opera√ß√£o	                    M√©todo	Exemplo
Adicionar elemento	            append()	lista.append(10)
Inserir elemento em posi√ß√£o	    insert()	lista.insert(1, 20)
Concatenar listas	            extend()	lista.extend([30, 40])
Remover elemento (valor)	    remove()	lista.remove(10)
Remover elemento (√≠ndice)	    pop()	    lista.pop(2)
Ordenar lista	                sort()	    lista.sort()
Inverter lista	                reverse()	lista.reverse()
Tamanho da lista	            len()	    len(lista)
Menor elemento	                min()	    min(lista)
Maior elemento	                max()	    max(lista)
As listas s√£o extremamente flex√≠veis e fundamentais para trabalhar com cole√ß√µes de dados 
em Python! üöÄ
'''